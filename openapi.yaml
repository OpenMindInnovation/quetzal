---
openapi: 3.0.2
info:
  title: quetzal
  description: Quetzalcoatl API (formerly known as CloudTS)
  version: 0.3.0
paths:
  /api/auth/token:
    post:
      summary: Authenticate and obtain a token
      tags:
        - authentication
      operationId: app.api.auth.get_token
      security:
        - basic: []
        - bearer: []
      responses:
        '200':
          description: Authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    description: Token for bearer authentication
                    type: string
                required:
                  - token
        default:
          $ref: '#/components/responses/ErrorResponse'
  /api/auth/logout:
    post:
      summary: Logout and invalidate the existing token
      tags:
        - authentication
      operationId: app.api.auth.logout
      responses:
        '204':
          description: Logout successful
        default:
          $ref: '#/components/responses/ErrorResponse'
  /api/data/workspaces/:
    get:
      summary: Get all workspaces
      tags:
        - data
      operationId: app.api.data.workspace.fetch
      parameters:
      - name: name
        in: query
        description: Filter workspaces by name
        required: false
        schema:
          type: string
      - name: owner
        in: query
        description: Filter workspaces by owner
        required: false
        schema:
          type: string
      - name: deleted
        in: query
        description: Include deleted workspaces
        schema:
          type: boolean
      responses:
        '200':
          description: Workspace list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workspace'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      summary: Create a new workspace
      tags:
        - data
      operationId: app.api.data.workspace.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewWorkspace'
        required: true
      responses:
        '201':
          description: Workspace created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /api/data/workspaces/{wid}:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier
        required: true
        schema:
          type: integer
    get:
      summary: Workspace details
      description: Fetchs all details of a workspace
      tags:
        - data
      operationId: app.api.data.workspace.details
      responses:
        '200':
          description: Workspace details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      summary: Request deletion of a workspace
      description: |-
        Marks a workspace for deletion.
        Workspaces cannot be immediately deleted, due to complex resource management.
        The status of the workspace can be requested on this same path, using a GET
        instead of a DELETE.
      tags:
        - data
      operationId: app.api.data.workspace.delete
      responses:
        '202':
          description: Workspace marked for deletion
        default:
          $ref: '#/components/responses/ErrorResponse'
  /api/data/workspaces/{wid}/commit:
    put:
      summary: Commit a workspace
      description: |-
        Requests a workspace commit. That is, all metadata added or modified
        in this workspace will be committed to the global workspace, becoming
        available to all users. Metadata versions will be incremented.
      tags:
        - data
      operationId: app.api.data.workspace.commit
      parameters:
        - name: wid
          in: path
          description: Workspace identifier
          required: true
          schema:
            type: integer
      responses:
        '202':
          description: Successfully requested a workspace commit operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /api/data/workspaces/{wid}/scan:
    put:
      summary: Update workspace views
      description: |-
        Requests the update of the views of a workspace. All the internal databases
        used for the query operation will be updated to contain the latest modifications
        of the metadata.
      tags:
        - data
      operationId: app.api.data.workspace.scan
      parameters:
        - name: wid
          in: path
          description: Workspace identifier
          required: true
          schema:
            type: integer
      responses:
        '202':
          description: Successfully requested a workspace scan operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /api/data/workspaces/{wid}/files/:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier
        required: true
        schema:
          type: integer
    get:
      summary: List workspace files
      description: |-
        Fetchs all the files that have been added in this workspace. Files
        whose metadata has been modified in this workspace will also be
        included.
      tags:
        - data
      operationId: app.api.data.file.fetch
      responses:
        '200':
          description: List of workspace files
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      summary: Add a new file
      description: |-
        Upload a new file by sending its contents. The file will not have any
        additional metadata associated to it.
      tags:
        - data
      operationId: app.api.data.file.create
      requestBody:
        content:
          # There are some limitations of the wsgi server and connexion that
          # do not let us have a correct complex multipart
          multipart/form-data:
            schema:
              type: object
              properties:
                file_content:
                  type: string
                  format: binary
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
  /api/data/workspaces/{wid}/files/{uuid}:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier
        required: true
        schema:
          type: integer
      - name: uuid
        in: path
        description: File identifier
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Fetch file metadata or contents
      description: |-
        Serves the file contents or its metadata, according to the accepted
        content response header. When the metadata is requested, this returns
        the updated version with the modifications that may have been
        introduced in this workspace.
      tags:
        - data
      operationId: app.api.data.file.details_w
      responses:
        '200':
          description: File contents or metadata
          content:
            application/json:
              schema:
                type: object
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          $ref: '#/components/responses/ErrorResponse'
    patch:
      summary: Modify file metadata
      description: |-
        Change the file metadata by updating it. Updating metadata changes
        key/value pairs, adding a new key/value pair if does not exist and
        changing the value if the key already exists. However, it cannot delete
        a key/value that already exists. To delete metadata, refer to the
        PUT method on this endpoint.
      tags:
        - data
      operationId: app.api.data.file.update_metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Metadata successfully updated
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      summary: Rewrite file metadata
      description: |-
        Change the file metadata entirely. In contrast to the PATCH method to
        on this endpoint, this method sets the new metadata and discards any
        previous metadata that was defined before.
      tags:
        - data
      operationId: app.api.data.file.set_metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Metadata successfully saved
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
  /api/data/workspaces/{wid}/queries/:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier
        required: true
        schema:
          type: integer
    get:
      summary: List all queries of a workspace
      description: |-
        List all the queries that are associated with a workspace.
      tags:
        - data
      operationId: app.api.data.query.fetch
      responses:
        '200':
          description: List of queries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Query'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      summary: Prepare a query for a workspace
      description: |-
        Description
      tags:
        - data
      operationId: app.api.data.query.create
      parameters:
        - name: wid
          in: path
          description: Workspace identifier
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuery'
        required: true
      responses:
        '301':
          description: Workspace metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Query'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /api/data/workspaces/{wid}/queries/{qid}:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier
        required: true
        schema:
          type: integer
      - name: qid
        in: path
        description: Query identifier
        required: true
        schema:
          type: integer
    get:
      summary: Get details on query
      description: |-
        Description.
      tags:
        - data
      operationId: app.api.data.query.details
      responses:
        '200':
          description: Query details and results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Query'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /api/data/files/{uuid}:
    parameters:
      - name: uuid
        in: path
        description: File identifier
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Fetch file metadata or contents
      description: |-
        Serves the file contents or its metadata, according to the accepted
        content response header. In the case of metadata, this endpoint returns
        the most recent metadata that has been committed.
      tags:
        - data
      operationId: app.api.data.file.details
      responses:
        '200':
          description: File contents or metadata
          content:
            application/json:
              schema:
                type: object
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          $ref: '#/components/responses/ErrorResponse'
components:
  schemas:
    NewWorkspace:
      title: Workspace creation input type
      description: Input data type to create a workspace
      required:
      - families
      - name
      - description
      type: object
      properties:
        name:
          type: string
        families:
          description: |-
            Metadata requested for this workspace. The metadata request
            is represented by an object (i.e. a dictionary). The object keys are
            metadata family names; their values are the version number of the family.
            When the version is null, it is equivalent to requesting the latest
            version available.
          type: object
        description:
          description: Descriptive text of the purpose of this workspace
          type: string
        temporary:
          type: boolean
      example: |-
        {
            "name": "my_workspace",
            "families": {
                "base": null,
                "application": 123
            },
            "temporary": false
        }
    Workspace:
      title: Workspace details type
      description: Workspace details
      type: object
      properties:
        id:
          description: Workspace ID
          type: integer
        status:
          description: Workspace status
          enum:
            - INITIALIZING
            - READY
            - SCANNING
            - UPDATING
            - COMMITTING
            - DELETING
            - INVALID
            - CONFLICT
            - DELETED
        description:
          description: Descriptive text of the purpose of this workspace
          type: string
        families:
          description: |-
            Families and corresponding versions used in this workspace.
            This property is a object whose keys are family names and values are
            integers.
          type: object
        creation_date:
          format: date-time
          description: Date when the workspace was created
          type: string
        temporary:
          description: |-
            Whether this workspace is temporary or not. Temporary workspaces
            are automatically deleted after some time.
          type: boolean
        owner:
          description: User who owns this workpace
          type: string
        data_url:
          description: URL of a remote storage location for files used in this workspace
          type: string
          nullable: true
        name:
          description: Name of the workspace
          type: string
      example: |-
        {
            "id": 1,
            "status": "ready",
            "description": "Details on what this workspace is for",
            "families": {},
            "creation_date": "'201'9-28-02T12:23:55",
            "temporary": false,
            "owner": "username",
            "data_url": "gs://some_bucket_name"
        }
    File:
      title: File details type
      description: File details
      type: object
      properties:
        id:
          description: File ID
          type: string
          format: uuid
        metadata:
          description: File metadata
          type: object
    NewQuery:
      title: Query creation input type
      description: Metadata workspace query
      required:
        - dialect
        - query
      type: object
      properties:
        dialect:
          description: Dialect of query
          enum:
            - postgresql
        query:
          description: Query in code as needed by the dialect
          type: string
      example: |-
        {
          "dialect": "postgresql",
          "query": "SELECT * FROM base"
        }
    Query:
      title: Metadata query type
      description: A query applied to the views provided by a workspace.
      required:
        - id
        - workspace_id
        - dialect
        - query
      type: object
      properties:
        id:
          description: Query identifier
          type: integer
        workspace_id:
          description: Workspace identifier where the query operates
          type: integer
        dialect:
          description: Dialect of query
          enum:
            - postgresql
        query:
          description: Query in code as needed by the dialect
          type: string
        results:
          description: Query results
          type: array
          items:
            type: object
      example: |-
        {
          "id": 123,
          "workspace_id: 456,
          "dialect": "postgresql",
          "query": "SELECT * FROM base",
          "results": [
            {
              "id": "00000000-0000-4000-8000-000000000000",
              "key": "value"
            },
            {
              "id": "00000000-0000-4000-8000-000000000001",
              "key": "other_value"
            }
           ]
        }
  responses:
    # Error response that implements RFC-7807
    ErrorResponse:
      description: Problem details error object.
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              type:
                description: A URI reference that identifies the problem type.
                type: string
              title:
                description: A short, human-readable summary of the problem type.
                type: string
              status:
                description: The HTTP status code.
                type: integer
              detail:
                description: A human-readable explanation specific to this occurrence of the problem.
                type: string
              instance:
                description: A URI reference that identifies the specific occurrence of the problem.
                type: string
  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: app.api.auth.check_basic
    bearer:
      type: http
      scheme: bearer
      x-bearerInfoFunc: app.api.auth.check_bearer
security:
  - bearer: []
tags:
  - name: authentication
    description: Authentication operations
  - name: data
    description: Data operations
