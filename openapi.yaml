---
openapi: 3.0.2

info:
  title: Quetzalcoatl API
  version: 0.1.0
  description: |
    Quetzalcoatl: an API to manage data files and their associated metadata.

    TODO: extensive documentation in common markdown

  termsOfService: https://quetz.al/terms  # TODO: activate this URL
  contact:
    name: API support
    url: https://quetz.al/support         # TODO: activate this URL
    email: support@quetz.al               # TODO: activate this address
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause

servers:
  - url: https://api.quetz.al/api/v1       # TODO: activate and deploy here
    description: Public server
  - url: https://staging.quetz.al/api/v1   # TODO: activate and deploy here
    description: Staging server
  - url: https://devel.quetz.al/api/v1     # TODO: activate and deploy here
    description: Development server
  - url: https://local.quetz.al/api/v1
    description: Local development data server

externalDocs:
  url: https://quetz.al/docs              # TODO: activate this URL. Maybe readthedocs?
  description: Detailed documentation and source code of Quetzalcoatl.

paths:
  # Authentication endpoints
  /auth/token:
    post:
      summary: Login.
      description: |-
        Authenticate with simple HTTP authentication and obtain a bearer token.
        This bearer token can be used on the other endpoints of the API.
      tags:
        - authentication
      operationId: auth.get_token
      x-openapi-router-controller: app.api.router
      security:
        - basic: []
      responses:
        '200':
          $ref: '#/components/responses/AuthenticationSuccess'
        default:
          $ref: '#/components/responses/Error'

  /auth/logout:
    post:
      summary: Logout.
      description: |-
        Logout by invalidating the existing token.
      tags:
        - authentication
      operationId: auth.logout
      x-openapi-router-controller: app.api.router
      responses:
        '204':
          description: Logout successful
        default:
          $ref: '#/components/responses/Error'

  # Data endpoints (workspaces)
  /data/workspaces/:
    get:
      summary: List workspaces.
      description: |-
       List workspace details. Optionally, filter workspaces according to
       their name, owner or whether they have been deleted.
      tags:
        - data
      operationId: workspace.fetch
      x-openapi-router-controller: app.api.router
      parameters:
      - $ref: '#/components/parameters/pageOffset'
      - $ref: '#/components/parameters/pageSize'
      - name: name
        in: query
        description: Filter workspaces by name
        required: false
        schema:
          type: string
      - name: owner
        in: query
        description: Filter workspaces by owner
        required: false
        schema:
          type: string
      - name: deleted
        in: query
        description: Include deleted workspaces
        schema:
          type: boolean
      responses:
        '200':
          $ref: '#/components/responses/PaginatedWorkspaces'
        default:
          $ref: '#/components/responses/Error'
    post:
      summary: Create workspace.
      description: |-
        Create a workspace, which initializes the basic resources and
        information associated with it, and then schedules some background
        tasks to initialize Cloud resources.
      tags:
        - data
      operationId: workspace.create
      x-openapi-router-controller: app.api.router
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/WorkspaceDetails'
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier
        required: true
        schema:
          type: integer
    get:
      summary: Workspace details.
      description: |-
        Obtain all information of a workspace.
      tags:
        - data
      operationId: workspace.details
      x-openapi-router-controller: app.api.router
      responses:
        '200':
          $ref: '#/components/responses/WorkspaceDetails'
        default:
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete workspace.
      description: |-
        Marks a workspace for deletion.
        Workspaces cannot be immediately deleted, due to complex resource
        management. Moreover, workspaces are not completely deleted in order to
        keep a history of workspaces and possibly to add some resurrect
        functionality. Instead, all of their resources are freed and its
        status is marked as DELETED.

        The current status of the workspace can be requested on this same path,
        using a GET instead of a DELETE.
      tags:
        - data
      operationId: workspace.delete
      x-openapi-router-controller: app.api.router
      responses:
        '202':
          description: Workspace marked for deletion
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}/commit:
    put:
      summary: Commit workspace.
      description: |-
        Requests a workspace commit. That is, all metadata added or modified
        in this workspace will be moved to the global, public workspace,
        becoming available to all users. Metadata versions will be incremented.
      tags:
        - data
      operationId: workspace.commit
      x-openapi-router-controller: app.api.router
      parameters:
        - name: wid
          in: path
          description: Workspace identifier
          required: true
          schema:
            type: integer
      responses:
        '202':
          $ref: '#/components/responses/WorkspaceDetails'
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}/scan:
    put:
      summary: Update views.
      description: |-
        Requests the update of the views of a workspace. All the internal
        databases used for the query operation will be updated to contain the
        latest modifications of the metadata.
      tags:
        - data
      operationId: workspace.scan
      x-openapi-router-controller: app.api.router
      parameters:
        - name: wid
          in: path
          description: Workspace identifier
          required: true
          schema:
            type: integer
      responses:
        '202':
          $ref: '#/components/responses/WorkspaceDetails'
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}/files/:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier
        required: true
        schema:
          type: integer
    get:
      summary: List files.
      description: |-
        Fetchs all the files that have been added in this workspace. Files
        whose metadata has been modified in this workspace will also be
        included.
      tags:
        - data
      operationId: workspace_file.fetch
      x-openapi-router-controller: app.api.router
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          $ref: '#/components/responses/PaginatedFiles'
        default:
          $ref: '#/components/responses/Error'
    post:
      summary: Upload file.
      description: |-
        Upload a new file to a workspace by sending its contents.
        The file will not have any additional metadata associated to it.
      tags:
        - data
      operationId: workspace_file.create
      x-openapi-router-controller: app.api.router
      requestBody:
        content:
          # There are some limitations of the wsgi server and connexion that
          # do not let us have a correct complex multipart
          multipart/form-data:
            schema:
              type: object
              properties:
                file_content:
                  type: string
                  format: binary
      responses:
        '201':
          $ref: '#/components/responses/FileDetails'
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}/files/{uuid}:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier
        required: true
        schema:
          type: integer
      - name: uuid
        in: path
        description: File identifier
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Fetch file.
      description: |-
        Serves the file contents or its metadata, according to the accepted
        content response header. When the metadata is requested, this returns
        the updated version with the modifications that may have been
        introduced in this workspace.
      tags:
        - data
      operationId: workspace_file.details
      x-openapi-router-controller: app.api.router
      responses:
        '200':
          '$ref': '#/components/responses/FileContentsOrMetadata'
        default:
          $ref: '#/components/responses/Error'
    patch:
      summary: Modify metadata.
      description: |-
        Change the file metadata by updating it. Updating metadata changes
        key/value pairs, adding a new key/value pair if does not exist and
        changing the value if the key already exists. However, it cannot delete
        a key/value that already exists. To delete metadata, refer to the
        PUT method on this endpoint.
      tags:
        - data
      operationId: workspace_file.update_metadata
      x-openapi-router-controller: app.api.router
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnstructuredMetadata'
      responses:
        '200':
          $ref: '#/components/responses/FileDetails'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Rewrite metadata.
      description: |-
        Change the file metadata entirely. In contrast to the PATCH method to
        on this endpoint, this method sets the new metadata and discards any
        previous metadata that was defined before.
      tags:
        - data
      operationId: workspace_file.set_metadata
      x-openapi-router-controller: app.api.router
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnstructuredMetadata'
      responses:
        '200':
          $ref: '#/components/responses/FileDetails'
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}/queries/:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier
        required: true
        schema:
          type: integer
    get:
      summary: List queries.
      description: |-
        List all the queries that are associated with a workspace.
      tags:
        - data
      operationId: workspace_query.fetch
      x-openapi-router-controller: app.api.router
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          $ref: '#/components/responses/PaginatedQueries'
        default:
          $ref: '#/components/responses/Error'
    post:
      summary: Prepare a query.
      description: |-
        Queries in Quetzal are saved as a resource associated to a workspace.
        This endpoint creates one and responds with a _see other_ status
        referencing the query details endpoint.

        Since the query details contains the query results as a
        paginated list, this endpoint also accepts the normal pagination
        parameters.
      tags:
        - data
      operationId: workspace_query.create
      x-openapi-router-controller: app.api.router
      parameters:
        - name: wid
          in: path
          description: Workspace identifier
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
        required: true
      responses:
        '303':
          $ref: '#/components/responses/QueryDetails'
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}/queries/{qid}:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier
        required: true
        schema:
          type: integer
      - name: qid
        in: path
        description: Query identifier
        required: true
        schema:
          type: integer
    get:
      summary: Query details.
      description: |-
        The details of a query, which contains the query itself and a paginated
        list of its results.
      tags:
        - data
      operationId: workspace_query.details
      x-openapi-router-controller: app.api.router
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          $ref: '#/components/responses/QueryDetails'
        default:
          $ref: '#/components/responses/Error'

  # Data endpoints (global, committed files)
  /data/files/{uuid}:
    parameters:
      - name: uuid
        in: path
        description: File identifier
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Fetch file.
      description: |-
        This endpoint can be used to fetch the file contents or its metadata.
        The type of response, data or metadata, depends on the `Accept`
        request header. In the case of metadata, this endpoint returns
        the most recent metadata that has been committed.
      tags:
        - data
      operationId: public.file_details
      x-openapi-router-controller: app.api.router
      responses:
        '200':
          $ref: '#/components/responses/FileContentsOrMetadata'
        default:
          $ref: '#/components/responses/Error'

components:
  parameters:
    pageOffset:
      name: page
      in: query
      description: The page of a collection to return.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: per_page
      in: query
      description: Number of items to return per page.
      schema:
        type: integer
        minimum: 1
        maximum: 100000
        default: 100

  schemas:
    Error:
      type: object
      description: |-
        Error object.

        An error object used on throughout the Quetzal API to describe errors
        and its details following the problem description object defined in
        [RFC-7807](https://tools.ietf.org/html/rfc7807).
      properties:
        type:
          description: A URI reference that identifies the problem type.
          type: string
        title:
          description: A short, human-readable summary of the problem type.
          type: string
        status:
          description: The HTTP status code.
          type: integer
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
        instance:
          description: A URI reference that identifies the specific occurrence of the problem.
          type: string
      example: |-
        {
          "type": "https://quetz.al/problems/bad-request",
          "status": 400,
          "title": "Bad request.",
          "detail": "Some details on the error.",
          "instance": "/path/id"
        }
    Token:
      type: object
      description: |-
        Authentication token.

        Object for a successful basic authentication, containing a token for
        subsequent operations requiring a bearer token authentication.
      properties:
        token:
          description: Token for bearer authentication.
          type: string
      required:
        - token
    PaginationEnvelope:
      type: object
      description: |-
        Paginated response template type.

        An envelope for responses that need to be paginated. When a collection
        is accessed through a GET request, the results are sent in an object
        that informs on the pagination status (page, number of pages, number
        of results) and the data itself. This type is heavily inspired from
        linode's PaginationEnvelope.
      required:
        - pages
        - page
        - total
        - results
      properties:
        pages:
          type: integer
          description: Number of pages available in the collection
          readOnly: true
        page:
          type: integer
          description: Current page number
          readOnly: true
        total:
          type: integer
          description: Total number of items in the collection
          readOnly: true
        results:
          type: array
          description: Array of objects with the results of the current page
          readOnly: true
          items:
            type: object
      example: |-
        {
          "pages": 40,
          "page": 1,
          "total": 120,
          "results": [
            {"id": 1},
            {"id": 2},
            {"id": 3}
          ]
        }
    Workspace:
      description: Workspace details type.
      required:
        - name
        - description
        - families
      type: object
      properties:
        id:
          description: Workspace ID
          type: integer
          readOnly: true
        status:
          description: Workspace status
          enum:
            - INITIALIZING
            - READY
            - SCANNING
            - UPDATING
            - COMMITTING
            - DELETING
            - INVALID
            - CONFLICT
            - DELETED
          readOnly: true
        creation_date:
          format: date-time
          description: Date when the workspace was created
          type: string
          readOnly: true
        owner:
          description: User who owns this workpace
          type: string
          readOnly: true
        data_url:
          description: URL of a remote storage location for files used in this workspace
          type: string
          readOnly: true
          nullable: true
        name:
          description: Name of the workspace
          type: string
        description:
          description: Descriptive text of the purpose of this workspace
          type: string
        families:
          description: |-
            Families and corresponding versions used in this workspace.
            This property is a object whose keys are family names and values are
            integers.
          type: object
        temporary:
          description: |-
            Whether this workspace is temporary or not. Temporary workspaces
            are automatically deleted after some time.
          type: boolean
      example: |-
        {
            "id": 1,
            "status": "READY",
            "creation_date": "'2019-02-28T09:37:05.618034+00:00",
            "owner": "username",
            "data_url": "gs://some_bucket_name"
            "name": "my_workspace",
            "description": "Details on what this workspace is for",
            "families": {
                "base": 100,
                "other": 14
            },
            "temporary": false
        }
    PaginatedWorkspaces:
      description: |-
        A paginated list of workspaces, using the PaginationEnvelope template.
      type: object
      required:
        - results
        - page
        - pages
        - total
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'
        page:
          $ref: '#/components/schemas/PaginationEnvelope/properties/page'
        pages:
          $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
        total:
          $ref: '#/components/schemas/PaginationEnvelope/properties/total'
      example: |-
        {
          "page": 1,
          "pages": 10,
          "total": 20,
          "results": [
            {
                "id": 1,
                "status": "READY",
                "creation_date": "'2019-02-28T12:42:01.618034+00:00",
                "owner": "username",
                "data_url": "gs://some_bucket_name"
                "name": "my_workspace",
                "description": "Details on what this workspace is for",
                "families": {
                    "base": 100,
                    "other": 14
                },
                "temporary": false
            },
            {
                "id": 2,
                "status": "INITIALIZING",
                "creation_date": "'2019-03-02T23:01:39.323562+00:00",
                "owner": "username",
                "data_url": "gs://another_bucket_name"
                "name": "my_other_workspace",
                "description": "Details on what this workspace is for",
                "families": {
                    "base": 1,
                    "fruits": 4
                },
                "temporary": false
            }
          ]
        }

    BaseMetadata:
      description: |-
        Minimal metadata of a file.

        All files in Quetzal have metadata and this metadata can have whatever
        structure the user requires. However, there is a minimal set of
        metadata entries, under the "base" family. Quetzal API operations that
        list files use this type to describe their results.
      type: object
      required:
        - id
        - url
        - path
        - filename
        - checksum
        - size
        - date
      properties:
        id:
          description: File identifier.
          type: string
          format: uuid
        url:
          description: File URL on Quetzal's data bucket.
          type: string
          format: url
        path:
          description: Path of the file.
          type: string
        filename:
          description: File name. This does not include its path.
          type: string
        checksum:
          description: MD5 checksum of the file in hexadecimal string.
          type: string
        size:
          description: File size in bytes.
          type: integer
          minimum: 0
        date:
          description: Date when this file was uploaded to Quetzal.
          type: string
          # Note format: date-time is not used yet (Needs server implementation)
      example: |-
        {
             "id": "311b4303-bd04-447e-ba71-377545ffa27a",
             "url": "gs://quetzal-dev-data/311b4303-bd04-447e-ba71-377545ffa27a",
             "date": "2019-02-08 15:55:35.236049+00:00",
             "path": "study/p_001",
             "size": 1048576,
             "checksum": "f15bc88f4e5cea9b3c578591fd3e74fb",
             "filename": "my_file.bin"
        }

    UnstructuredMetadata:
      description: |-
        Metadata of a file without a specific structure.

        All files in Quetzal have metadata and this metadata can have whatever
        structure the user requires. This schema is an object without any
        requirements.
      type: object

    PaginatedFiles:
      description: |-
        A paginated list of files, using the PaginationEnvelope template.
        Only the base metadata of the file is included in the results.
      type: object
      required:
        - results
        - page
        - pages
        - total
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/BaseMetadata'
        page:
          $ref: '#/components/schemas/PaginationEnvelope/properties/page'
        pages:
          $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
        total:
          $ref: '#/components/schemas/PaginationEnvelope/properties/total'

    Query:
      description: |-
        A query applied to the views provided by a workspace. In addition of
        the query details elements, this object is also an extension to the
        pagination envelope object
      required:
        - dialect
        - query
      type: object
      properties:
        id:
          description: Query identifier
          type: integer
          readOnly: true
        workspace_id:
          description: Workspace identifier where the query operates
          type: integer
          readOnly: true
        dialect:
          description: Dialect of query
          enum:
            - postgresql
        query:
          description: Query in code as needed by the dialect
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/UnstructuredMetadata'
          readOnly: true
        page:
          $ref: '#/components/schemas/PaginationEnvelope/properties/page'
        pages:
          $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
        total:
          $ref: '#/components/schemas/PaginationEnvelope/properties/total'

      example: |-
        {
          "id": 123,
          "workspace_id": 456,
          "dialect": "postgresql",
          "query": "SELECT * FROM base",
          "page": 1,
          "pages": 10,
          "total": 20,
          "results": [
            {
              "id": "00000000-0000-4000-8000-000000000000",
              "key": "value"
            },
            {
              "id": "00000000-0000-4000-8000-000000000001",
              "key": "other_value"
            }
           ]
        }

    PaginatedQueries:
      description: |-
        A paginated list of queries, using the PaginationEnvelope template.
        The results of the queries should not be included, these are only shown
        on the query details endpoint.
      type: object
      required:
        - results
        - page
        - pages
        - total
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Query'
        page:
          $ref: '#/components/schemas/PaginationEnvelope/properties/page'
        pages:
          $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
        total:
          $ref: '#/components/schemas/PaginationEnvelope/properties/total'

  responses:
    Error:
      description: Problem details as a RFC-7807 problem description object.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    AuthenticationSuccess:
      description: Authentication succeeded.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Token'
    PaginatedWorkspaces:
      description: Paginated list of workspaces.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedWorkspaces'
    WorkspaceDetails:
      description: Details of a workspace.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Workspace'
    PaginatedFiles:
      description: Paginated list of files.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedFiles'
    FileDetails:
      description: File details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseMetadata'
    FileContentsOrMetadata:
      description: File contents or metadata.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnstructuredMetadata'
        application/octet-stream:
          schema:
            type: string
            format: binary
    PaginatedQueries:
      description: Paginated list of queries
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedQueries'
    QueryDetails:
      description: Query details, including its results.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Query'

  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: app.api.auth.check_basic
    bearer:
      type: http
      scheme: bearer
      x-bearerInfoFunc: app.api.auth.check_bearer

security:
  - bearer: []

tags:
  - name: authentication
    description: Authentication operations
  - name: data
    description: Data operations
