---
openapi: 3.0.2

info:
  title: Quetzalcoatl API
  version: "{{ version }}"
  description: |
    Quetzal (short for Quetzalcoatl): an API to manage data files and their
    associated metadata.

    Quetzal is an application that uses Cloud storage providers and
    non-structured databases to  help researchers organize their data and
    metadata files. Its main feature is to provide a remote, virtually infinite,
    storage location for researchers' data, while providing an API to
    encapsulate data/metadata operations. In other words, researchers and teams
    can work large amounts of data that would be too large for local analyses,
    using Quetzal to simplify the complexity of Cloud resource management.
    
    # Overview

    ...

    ## Concepts

    * File
    * Metadata
      Versioning too
    * Families
    * Workspace
      Description, workspace states, data_url, etc.
    * Workspace views
    * Queries

    # Authentication

    Authentication details

    # Errors

    Quetzal uses standard HTTP error codes to indicate success or failure of its
    operations. The body of the response follows
    [RFC-7807](https://tools.ietf.org/html/rfc7807) to provide details on an
    error. For example:

    ```
    {
      "type": "https://quetz.al/problems/some-name",
      "title": "Bad request.",
      "status": 400,
      "detail": "Incorrect foo due to missing bar.",
      "instance": "/some_path/some_id"
    }
    ```

    # Versioning

    API version | Changes
    ------------|---------
    0.2.0       | [API changes](https://github.com/quetz-al/quetzal/releases/tag/v0.2.0)
    0.1.0       | [API changes](https://github.com/quetz-al/quetzal/releases/tag/v0.1.0)

    # TODO

    * Add file delete mechanism.
    * Add workspace update through a PUT.

    # API Reference

  termsOfService: https://quetz.al/terms  # TODO: activate this URL
  contact:
    name: API support
    url: https://quetz.al                 # TODO: activate this URL
    email: support@quetz.al               # TODO: activate this address
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause

servers:
  - url: https://api.quetz.al/api/v1       # TODO: activate and deploy here
    description: Public server
  - url: https://staging.quetz.al/api/v1
    description: Staging server
  - url: https://local.quetz.al/api/v1
    description: Local development data server

externalDocs:
  url: https://quetzal-api.readthedocs.org
  description: Quetzal documentation at readthedocs.org.

paths:
  # Authentication endpoints
  /auth/token:
    post:
      summary: Login.
      description: |-
        Authenticate with simple HTTP authentication and obtain a bearer token.
        This bearer token can be used on the other endpoints of the API.
      tags:
        - authentication
      operationId: auth.get_token
      x-openapi-router-controller: quetzal.app.api.router
      security:
        - basic: []
      responses:
        '200':
          $ref: '#/components/responses/AuthenticationSuccess'
        default:
          $ref: '#/components/responses/Error'

  /auth/logout:
    post:
      summary: Logout.
      description: |-
        Logout by invalidating the existing token.
      tags:
        - authentication
      operationId: auth.logout
      x-openapi-router-controller: quetzal.app.api.router
      responses:
        '204':
          description: Logout successful
        default:
          $ref: '#/components/responses/Error'

  # Data endpoints (workspaces)
  /data/workspaces/:
    get:
      summary: List workspaces.
      description: |-
       List workspace details. Optionally, filter workspaces according to
       their name, owner or whether they have been deleted.
      tags:
        - data
        - public
        - workspace
      operationId: workspace.fetch
      x-openapi-router-controller: quetzal.app.api.router
      parameters:
      - $ref: '#/components/parameters/pageOffset'
      - $ref: '#/components/parameters/pageSize'
      - name: name
        in: query
        description: Filter workspaces by name
        required: false
        schema:
          type: string
      - name: owner
        in: query
        description: Filter workspaces by owner
        required: false
        schema:
          type: string
      - name: deleted
        in: query
        description: Include deleted workspaces
        schema:
          type: boolean
      responses:
        '200':
          $ref: '#/components/responses/PaginatedWorkspaces'
        default:
          $ref: '#/components/responses/Error'
    post:
      summary: Create workspace.
      description: |-
        Create a workspace, which initializes the basic resources and
        information associated with it, and then schedules some background
        tasks to initialize Cloud resources.
      tags:
        - data
        - public
      operationId: workspace.create
      x-openapi-router-controller: quetzal.app.api.router
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/WorkspaceDetails'
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier.
        required: true
        schema:
          type: integer
    get:
      summary: Workspace details.
      description: |-
        Obtain all information of a workspace.
      tags:
        - data
        - workspace
      operationId: workspace.details
      x-openapi-router-controller: quetzal.app.api.router
      responses:
        '200':
          $ref: '#/components/responses/WorkspaceDetails'
        default:
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete workspace.
      description: |-
        Marks a workspace for deletion.
        Workspaces cannot be immediately deleted, due to complex resource
        management. Moreover, workspaces are not completely deleted in order to
        keep a history of workspaces and possibly to add some resurrect
        functionality. Instead, all of their resources are freed and its
        status is marked as DELETED.

        The current status of the workspace can be requested on this same path,
        using a GET instead of a DELETE.
      tags:
        - data
      operationId: workspace.delete
      x-openapi-router-controller: quetzal.app.api.router
      responses:
        '202':
          description: Workspace marked for deletion
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}/commit:
    put:
      summary: Commit workspace.
      description: |-
        Requests a workspace commit. That is, all metadata added or modified
        in this workspace will be moved to the global, public workspace,
        becoming available to all users. Metadata versions will be incremented.
      tags:
        - data
        - workspace
      operationId: workspace.commit
      x-openapi-router-controller: quetzal.app.api.router
      parameters:
        - name: wid
          in: path
          description: Workspace identifier.
          required: true
          schema:
            type: integer
      responses:
        '202':
          $ref: '#/components/responses/WorkspaceDetails'
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}/scan:
    put:
      summary: Update views.
      description: |-
        Requests the update of the views of a workspace. All the internal
        databases used for the query operation will be updated to contain the
        latest modifications of the metadata.
      tags:
        - data
        - workspace
      operationId: workspace.scan
      x-openapi-router-controller: quetzal.app.api.router
      parameters:
        - name: wid
          in: path
          description: Workspace identifier.
          required: true
          schema:
            type: integer
      responses:
        '202':
          $ref: '#/components/responses/WorkspaceDetails'
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}/files/:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier.
        required: true
        schema:
          type: integer

    get:
      summary: List files.
      description: |-
        Fetches all the files that have been added in this workspace. Files
        whose metadata has been modified in this workspace will also be
        included.

        The file details included in the response only show their base metadata.
      tags:
        - data
        - workspace
      operationId: workspace_file.fetch
      x-openapi-router-controller: quetzal.app.api.router
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/fileFilter'
      responses:
        '200':
          $ref: '#/components/responses/PaginatedFiles'
        default:
          $ref: '#/components/responses/Error'
    post:
      summary: Upload file.
      description: |-
        Upload a new file to a workspace by sending its contents.
        The file will not have any additional metadata associated to it.
      tags:
        - data
        - workspace
      operationId: workspace_file.create
      x-openapi-router-controller: quetzal.app.api.router
      requestBody:
        content:
          # There are some limitations of the wsgi server and connexion that
          # do not let us have a correct complex multipart
          multipart/form-data:
            schema:
              '$ref': '#/components/schemas/FileContents'
      responses:
        '201':
          $ref: '#/components/responses/FileDetails'
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}/files/{uuid}:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier.
        required: true
        schema:
          type: integer
      - name: uuid
        in: path
        description: File identifier
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Fetch file.
      description: |-
        Serves the file contents or its metadata, according to the accepted
        content response header. When the metadata is requested, this returns
        the updated version with the modifications that may have been
        introduced in this workspace.
      tags:
        - data
        - workspace
      operationId: workspace_file.details
      x-openapi-router-controller: quetzal.app.api.router
      responses:
        '200':
          $ref: '#/components/responses/FileContentsOrMetadata'
        default:
          $ref: '#/components/responses/Error'
    patch:
      summary: Modify metadata.
      description: |-
        Change the file metadata by updating it. Updating metadata changes
        key/value pairs, adding a new key/value pair if does not exist and
        changing the value if the key already exists. However, it cannot delete
        a key/value that already exists. To delete metadata, refer to the
        PUT method on this endpoint.
      tags:
        - data
        - workspace
      operationId: workspace_file.update_metadata
      x-openapi-router-controller: quetzal.app.api.router
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataByFamily'
      responses:
        '200':
          $ref: '#/components/responses/FileMetadata'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Rewrite metadata.
      description: |-
        Change the file metadata entirely. In contrast to the PATCH method to
        on this endpoint, this method sets the new metadata and discards any
        previous metadata that was defined before.
      tags:
        - data
        - workspace
      operationId: workspace_file.set_metadata
      x-openapi-router-controller: quetzal.app.api.router
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataByFamily'
      responses:
        '200':
          $ref: '#/components/responses/FileMetadata'
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}/queries/:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier.
        required: true
        schema:
          type: integer
    get:
      summary: List queries.
      description: |-
        List all the queries that are associated with a workspace.
        Note that each query listed here is shown _without_ its results, for
        brevity.
      tags:
        - data
        - workspace
        - query
      operationId: workspace_query.fetch
      x-openapi-router-controller: quetzal.app.api.router
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          $ref: '#/components/responses/PaginatedQueries'
        default:
          $ref: '#/components/responses/Error'
    post:
      summary: Prepare a query.
      description: |-
        Queries in Quetzal are saved as a resource associated to a workspace.
        This endpoint creates one and responds with a *see other* status
        referencing the query details endpoint.

        Since the query details contains the query results as a
        paginated list, this endpoint also accepts the normal pagination
        parameters.
      tags:
        - data
        - workspace
        - query
      operationId: workspace_query.create
      x-openapi-router-controller: quetzal.app.api.router
      parameters:
        - name: wid
          in: path
          description: Workspace identifier.
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/QueryDetails'
        '303':
          $ref: '#/components/responses/QueryDetails'
        default:
          $ref: '#/components/responses/Error'

  /data/workspaces/{wid}/queries/{qid}:
    parameters:
      - name: wid
        in: path
        description: Workspace identifier.
        required: true
        schema:
          type: integer
      - name: qid
        in: path
        description: Query identifier
        required: true
        schema:
          type: integer
    get:
      summary: Query details.
      description: |-
        The details of a query, which contains the query itself and a paginated
        list of its results.
      tags:
        - data
        - workspace
        - query
      operationId: workspace_query.details
      x-openapi-router-controller: quetzal.app.api.router
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          $ref: '#/components/responses/QueryDetails'
        default:
          $ref: '#/components/responses/Error'

  # Data endpoints (global, committed files)
  /data/files/:
    get:
      summary: List public files.
      description: |-
        Fetches all the files that have been committed.

        The file details included in the response only show their base metadata.
      tags:
        - data
        - public
      operationId: public.file_fetch
      x-openapi-router-controller: quetzal.app.api.router
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/fileFilter'
      responses:
        '200':
          $ref: '#/components/responses/PaginatedFiles'
        default:
          $ref: '#/components/responses/Error'

  /data/files/{uuid}:
    parameters:
      - name: uuid
        in: path
        description: File identifier
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Fetch public file.
      description: |-
        This endpoint can be used to fetch the file contents or its metadata.
        The type of response, data or metadata, depends on the `Accept`
        request header. In the case of metadata, this endpoint returns
        the most recent metadata that has been committed.
      tags:
        - data
        - public
      operationId: public.file_details
      x-openapi-router-controller: quetzal.app.api.router
      responses:
        '200':
          $ref: '#/components/responses/FileContentsOrMetadata'
        default:
          $ref: '#/components/responses/Error'

components:
  parameters:
    pageOffset:
      name: page
      in: query
      description: The page of a collection to return.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: per_page
      in: query
      description: Number of items to return per page.
      schema:
        type: integer
        minimum: 1
        maximum: 100000
        default: 100
    fileFilter:
      name: filters
      in: query
      description: |-
        Filters on the workspace files, separated by commas.
        These filters are applied only the base metadata family.
        This can be used to get a file by name, path, size or checksum.
      schema:
        type: string
      example:
        filename=foo.png,path=images,size=12314

  schemas:
    Error:
      type: object
      description: |-
        Error object.

        An error object used on throughout the Quetzal API to describe errors
        and its details following the problem description object defined in
        [RFC-7807](https://tools.ietf.org/html/rfc7807).
      properties:
        type:
          description: A URI reference that identifies the problem type.
          type: string
          example: https://quetz.al/problems/some-name
        title:
          description: A short, human-readable summary of the problem type.
          type: string
          example: Bad request.
        status:
          description: The HTTP status code.
          type: integer
          example: 400
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          example: Incorrect foo due to missing bar.
        instance:
          description: A URI reference that identifies the specific occurrence of the problem.
          type: string
          example: /some_path/some_id
    Token:
      type: object
      description: |-
        Authentication token.

        Object for a successful basic authentication, containing a token for
        subsequent operations requiring a bearer token authentication.
      properties:
        token:
          description: Token for bearer authentication.
          type: string
          example: wmBXR7vNj8tO+vSCdlqfJSJNvNAtyXr7
      required:
        - token
    PaginationEnvelope:
      type: object
      description: |-
        Paginated response template type.

        An envelope for responses that need to be paginated. When a collection
        is accessed through a GET request, the results are sent in an object
        that informs on the pagination status (page, number of pages, number
        of results) and the data itself. This type is heavily inspired from
        linode's PaginationEnvelope.
      required:
        - pages
        - page
        - total
        - results
      properties:
        page:
          type: integer
          description: Current page number
          readOnly: true
          example: 1
        pages:
          type: integer
          description: Number of pages available in the collection
          readOnly: true
          example: 3
        total:
          type: integer
          description: Total number of items in the collection
          readOnly: true
          example: 3
        results:
          type: array
          description: Array of objects with the results of the current page
          readOnly: true
          items:
            type: object
          example:
            - id: 1
            - id: 2
            - id: 3
    Workspace:
      description: Workspace details type.
      required:
        - name
        - description
        - families
      type: object
      properties:
        id:
          description: Workspace ID
          type: integer
          readOnly: true
          example: 1
        status:
          description: Workspace status
          enum:
            - INITIALIZING
            - READY
            - SCANNING
            - UPDATING
            - COMMITTING
            - DELETING
            - INVALID
            - CONFLICT
            - DELETED
          readOnly: true
          example: READY
        creation_date:
          format: date-time
          description: Date when the workspace was created
          type: string
          readOnly: true
          example: 2019-02-28T09:37:05.618034+00:00
        owner:
          description: User who owns this workpace
          type: string
          readOnly: true
          example: username
        data_url:
          description: URL of a remote storage location for files used in this workspace
          type: string
          readOnly: true
          nullable: true
          example: gs://some_bucket_name
        name:
          description: Name of the workspace
          type: string
          example: my_workspace
        description:
          description: Descriptive text of the purpose of this workspace
          type: string
          example: Details on the purpose of this workspace.
        families:
          description: |-
            Families and corresponding versions used in this workspace.
            This property is a object whose keys are family names and values are
            integers.
          type: object
          example:
            base: 30
            other: 24
        temporary:
          description: |-
            Whether this workspace is temporary or not. Temporary workspaces
            are automatically deleted after some time.
          type: boolean
          example: false
    PaginatedWorkspaces:
      description: |-
        A paginated list of workspaces, using the PaginationEnvelope template.
      type: object
      required:
        - page
        - pages
        - total
        - results
      properties:
        page:
          $ref: '#/components/schemas/PaginationEnvelope/properties/page'
        pages:
          $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
        total:
          $ref: '#/components/schemas/PaginationEnvelope/properties/total'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'

    BaseMetadata:
      description: |-
        Minimal metadata of a file.

        All files in Quetzal have metadata and this metadata can have whatever
        structure the user requires. However, there is a minimal set of
        metadata entries, under the "base" family. Quetzal API operations that
        list files use this type to describe their results.
      type: object
      required:
        - id
        - url
        - path
        - filename
        - checksum
        - size
        - date
      properties:
        id:
          description: File identifier.
          type: string
          format: uuid
          example: d06861a5-a14c-449c-bc9a-8f547186286a
        url:
          description: File URL on Quetzal's data bucket.
          type: string
          format: url
          example: gs://data-bucket/d06861a5-a14c-449c-bc9a-8f547186286a
        path:
          description: Path of the file.
          type: string
          example: study/sub_001
        filename:
          description: File name. This does not include its path.
          type: string
          example: ecg_data.bin
        checksum:
          description: MD5 checksum of the file in hexadecimal string.
          type: string
          example: f15bc88f4e5cea9b3c578591fd3e74fb
        size:
          description: File size in bytes.
          type: integer
          minimum: 0
          example: 1024
        date: # Note format: date-time is not used yet (Needs server implementation)
          description: Date when this file was uploaded to Quetzal.
          type: string
          example: 2019-02-08 15:55:35.236049+00:00

    UnstructuredMetadata:
      description: |-
        Metadata of a file without a specific structure.

        All files in Quetzal have metadata and this metadata can have whatever
        structure the user requires. This schema is an object without any
        requirements.
      type: object
      example:
        id: 311b4303-bd04-447e-ba71-377545ffa27a
        foo: var
        number: 1.23
        arr: [1, 2, 3]
        obj:
          key: value

    MetadataByFamily:
      description: |-
        Input type for metadata modifications.
      type: object
      required:
        - id
        - metadata
      properties:
        id:
          description: File identifier.
          type: string
          format: uuid
          example: d06861a5-a14c-449c-bc9a-8f547186286a
          readOnly: true
        metadata:
          type: object
          description: |-
            Metadata organized by dictionaries where the key is the family name
            and the contents is a dictionary with key:value pairs.
          example:
            base:
              id: 311b4303-bd04-447e-ba71-377545ffa27a
              path: study/session/subject
            other:
              foo: bar
              number: 1.2

    FileContents:
      description: |-
        Contents of a file to upload to a workspace.

        **Note**: Ideally, we want to add the metadata of the file on this
        schema, so that uploading a file contains its metadata and there is no
        need to do a second request to set the metadata. Unfortunately, there
        are two problems that impede this:

        1. Limitations on werkzueg, flask, connexion and most http clients that
          do not handle correctly different content-types in a
          multipart/form-data request.
        2. Limitations on connexion that do not handle form parameter validation
          correctly.
      type: object
      properties:
        content:
          type: string
          description: File contents in binary.
          format: binary
#        metadata:
#          type: string  # Object is not supported by connexion at the moment
#          description: |-
#            File metadata to set when uploading this file.
#
#            Due to a limitation on werkzeug, connexion and most http clients,
#            different content-types in a multipart/form-data request is rarely
#            implemented. For this reason, the metadata here is specified as a
#            string, but it is intended to be the string representation of a
#            JSON object.
#
#            Metadata should be a dictionary where keys are family names and
#            values are a dictionary.
#          example: >
#            {
#              "family_name": {
#                "foo": "bar",
#                "number": 1.2
#              }
#            }

    PaginatedFiles:
      description: |-
        A paginated list of files, using the PaginationEnvelope template.
        Only the base metadata of the file is included in the results.
      type: object
      required:
        - page
        - pages
        - total
        - results
      properties:
        page:
          $ref: '#/components/schemas/PaginationEnvelope/properties/page'
        pages:
          $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
        total:
          $ref: '#/components/schemas/PaginationEnvelope/properties/total'
        results:
          type: array
          items:
            $ref: '#/components/schemas/BaseMetadata'

    Query:
      description: |-
        A query applied to the views provided by a workspace. In addition of
        the query details elements, this object is also an extension to the
        pagination envelope object
      required:
        - id
        - dialect
        - query
      type: object
      properties:
        id:
          description: Query identifier
          type: integer
          readOnly: true
          example: 123
        workspace_id:
          description: Workspace identifier where the query operates
          type: integer
          readOnly: true
          example: 1
        dialect:
          description: Dialect of query
          enum:
            - postgresql
          example: postgresql
        query:
          description: Query in code as needed by the dialect
          type: string
          example: SELECT * FROM base
        page:
          $ref: '#/components/schemas/PaginationEnvelope/properties/page'
        pages:
          $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
        total:
          $ref: '#/components/schemas/PaginationEnvelope/properties/total'
        results:
          type: array
          items:
            $ref: '#/components/schemas/UnstructuredMetadata'
          readOnly: true

    QueryNoResults:
      description: |-
        An object like the Query object, but without its results.
      required:
        - id
        - dialect
        - query
      type: object
      properties:
        id:
          description: Query identifier
          type: integer
          readOnly: true
          example: 123
        workspace_id:
          description: Workspace identifier where the query operates
          type: integer
          readOnly: true
          example: 1
        dialect:
          description: Dialect of query
          enum:
            - postgresql
          example: postgresql
        query:
          description: Query in code as needed by the dialect
          type: string
          example: SELECT * FROM base

    PaginatedQueries:
      description: |-
        A paginated list of queries, using the PaginationEnvelope template.
        The results of the queries should not be included, these are only shown
        on the query details endpoint.
      type: object
      required:
        - page
        - pages
        - total
        - results
      properties:
        page:
          $ref: '#/components/schemas/PaginationEnvelope/properties/page'
        pages:
          $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
        total:
          $ref: '#/components/schemas/PaginationEnvelope/properties/total'
        results:
          type: array
          items:
            $ref: '#/components/schemas/QueryNoResults'

  responses:
    Error:
      description: Problem details as a RFC-7807 problem description object.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    AuthenticationSuccess:
      description: Authentication succeeded.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Token'
    PaginatedWorkspaces:
      description: Paginated list of workspaces.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedWorkspaces'
    WorkspaceDetails:
      description: Details of a workspace.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Workspace'
    PaginatedFiles:
      description: Paginated list of files.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedFiles'
    FileDetails:
      description: File details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseMetadata'
    FileMetadata:
      description: File details with all its metadata.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MetadataByFamily'
    FileContentsOrMetadata:
      description: File contents or metadata.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MetadataByFamily'
        application/octet-stream:
          schema:
            type: string
            format: binary
    PaginatedQueries:
      description: Paginated list of queries
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedQueries'
    QueryDetails:
      description: Query details, including its results.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Query'

  securitySchemes:
    basic:
      type: http
      scheme: basic
      description: Basic HTTP authentication. Used only to retrieve a token.
      x-basicInfoFunc: quetzal.app.api.auth.check_basic
    bearer:
      type: http
      scheme: bearer
      description: Access token authorization. Used for all API operations.
      x-bearerInfoFunc: quetzal.app.api.auth.check_bearer

security:
  - bearer: []

tags:
  - name: authentication
    description: Authentication operations.
  - name: data
    description: Data operations.
  - name: workspace
    description: Operations on resources associated with a workspace.
  - name: public
    description: Operations on public resources.
  - name: query
    description: Metadata query operations.

x-tagGroups:
  - name: Authentication API
    tags:
      - authentication
  - name: Data API
    tags:
      - public
      - workspace
      - query
